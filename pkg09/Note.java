package pkg09;

public class Note {
	/*
 	
 	static 메소드
 	객체와 상관없이 호출될 수 있는 메소드 입니다.
 	static 키워드를 사용합니다.
 	클래스 이름으로 접근이 가능합니다.
 	
 	인스턴스 메소드
 	반드시 객체가 생성이 되어야만 접근이 가능한 메소드 입니다.
 	this 참조 변수 사용이 가능합니다.
 	
 	static 메소드의 특징
 	참조하는			참조되는			특징
 	static 메소드		인스턴스 변수		반드시 객체를 이용하여 .연산자로 접근해야 합니다.	
 					static 변수		static이므로 바로 참조가 가능합니다.
 					static 메소드		static이므로 바로 참조가 가능합니다.
 					인스턴스 메소드		반드시 객체를 이용하여 .연산자로 접근해야 합니다.
 		
 	Math 클래스 
 	수학과 관련된 기능들을 가지고 있는 클래스
 	모든 변수는 static final이라는 키워드가 붙어 있습니다.
 	모든 메소드는 static이라는 키워드가 붙어 있습니다.
 	생성자가 존재하지 않습니다. 	
 	
 	** 접근 지정자(access modifier)는 변수 및 메소드의 접근 범위를 [어디까지 허용할 것인가]를 나타내는 척도 입니다.
 	접근 제어자 또는 접근 제한자라고도 합니다.
 	
 	예시) SNS의 게시글 비공개/공개, 내 통장 비밀번호의 비공개
 	
 	지정 방법
 	변수나 메소드에 다음과 같은 키워드를 사용하면 됩니다.
 	키워드들은 상호 배타적 입니다.
 	private(비공개), 기본(동일 패키지에만 공개), public(공개)
 	'기본'은 default를 말합니다.
 	
	 						private 	기본 		public
	 동일 클래스				가능			가능		가능
	 동일 패키지의 모든 클래스		불가능		가능		가능
	 다른 패키지에 모든 클래스		불가능		불가능	가능
 	
 	private 변수는 직접 변경이 불가능하므로 데이터를 외부에 숨기는 개념입니다.	
 	이러한 용어를 캡슐화라고 합니다.
 	
 	이러한 변수들은 직접 접근이 안되므로, 다른 동작으로 간접 접근해야 합니다.	
 	우리는 입금과 인출이라는 동작으로 값을 바꿔 보도록 합니다.	
 		
 	getter와 setter
 	private 변수는 직접 변경이 불가능 합니다.
 	하지만 경우에 따라서는 간접적인 방법으로 읽거나 쓸 수 있도록 public한 메소드를 제공할 수 있도록 권장합니다.	
 	
 	getter
 	비공개 변수의 값을 읽어 내기 위한 공개 메소드
 	
 	setter
 	비공개 변수의 값을 쓰기 위한 공개 메소드 	
 	
	 		
	 				getter 							setter	
	이름				get + 해당 변수의 첫글자만 대문자		set + 해당 변수의 첫글자만 대문자
	반환타입			해당 변수의 타입						void
	매개변수			없음								1개인데 해당 변수의 타입과 동일	 		
 		
 	this 키워드
 	객체 내에서 자기 자신을 지칭하는 특수한 레퍼런스 변수입니다.
 	객체 생성시 자동으로 생성이 됩니다.	
 	
 	this 용도
 	인스턴스 변수나 메소드임을 강조하기 위하여 사용합니다.
 	매개 변수와 이름이 동일할 때 구분하기 위하여 사용합니다.
 	멤버 메소드를 호출시에도 사용 합니다.
 	this.변수
 	this.메소드()	
 	this();는 생성자를 호출하는 구문입니다.
 		
 		
 		
	 */
}
