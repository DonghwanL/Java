package pkg02;

public class note {

	/*
	 Assist Key 속성 : 키워드 몇 글자 입력 후 Ctrl+ Space를 누르면 자동으로 코드 기입이 가능함.
	 				  syso - System.out.println();
	 서식 (format) : 소수 둘째 자리까지 표시, 전체 몇 까지 표시, 마이너스는 빨간색으로 표시
	 서식 지정자 : %d : 정수, %f : 실수, %c : 문자 1개, %s : 문자열	
	 			  		 %f는 기본 값이 소수점 6자리까지 표시함.
	 			  		 %m.nf : 전체 m자리이고, 소수점은 n자리까지 표시 (단, m과 n은 정수)
	 printf() 메소드 : 출력시 서식을 지정하기 위한 메소드, 자체 엔터 기능은 없음.
	 형 변환 : (신자료형)구자료형변수
	 		 (double)i); // 정수 자료형을 실수 자료형으로 변환
   	 	     (int)d); // 실수 자료형을 정수 자료형으로 변환
	 아스키 코드 : 사용자가 입력한 문자를 컴퓨터는 숫자로 인식 함.
	 			A (65), a (97), 0 (48)
	 			(char)i; // 정수 65를 문자 A로 변경 
	 연산자 우선 순위 : 단항 > 산술 > 이항 > 관계 > 비트 > 논리 > 조건 > 대입
	               * 소괄호는 우선 순위를 변경 할 수 있음.
	 증감 연산자 (PlusMinus01 클래스) : 변수의 좌측 또는 우측에 ++(1씩 증가) 또는 --(1씩 감소)가 붙어 있는 연산자
	  							   변수의 좌측에 있는 항목이 가장 먼저 연산 됨.
	  							   변수의 우측에 있는 항목이 가장 나중에 연산 됨.
	  							   
	  							   ex) c = ++a + b++;
	  								   1) ++a --> a = a+1 = 10 + 1 = 11
	  								   2) c = a + b = 11 + 20 = 31
	  								   3) b++ --> b = b+1 = 20 + 1 = 21 
	 관계(비교) 연산자 (LogicalOperator 클래스) : 두개의 값을 일대일로 비교하는 연산자 
	                                       총 6개) > >= < <= ==(equal) !=(not equal)
	                                       연산의 결과가 진위형(true, false)이 됨.
	                                       제어문에 사용 됨. 
	 논리 연산자 : && (and 연산), || (or 연산), ! (부정)
	 논리 연산표 : 식1    식2    &&    ||   
	           false  false false false
	           false  true  false true
	           true   false false true
	           true   true  true  true
	           
	           값      부정
	           false  true
	           true   false
 	  
	  조건 연산자 : 형식) 조건식 ? 참일때 수행 : 거짓일때 수행
	             조건식 - 참 또는 거짓을 의미함.
	             3항 연산자라고 부름.
	             조건 연산자를 잘 하려면 관계, 산술, 논리를 잘 숙지 해야 함.
	  
				 x%2 == 0 // x가 짝수인가?
				 x%3 == 0 // x가 3의 배수인가?
				 y%x == 0 // y는 x의 약수인가?
				 x%3 == 0 || x%5 == 0 // x는 3의 배수이거나 5의 배수인가?
				 
	  캐스팅 (Casting) : 필요에 의하여 데이터의 유형을 일시적으로 바꾸는 것.
	  				   Type mismatch: cannot convert from double to int (형변환 예시 오류)
	  				   1) 암시적 캐스팅 : double d = 100; // 작은 범위(정수)의 타입이 큰 범위(실수) 타입으로 시스템이 알아서 변경
	  				   2) 명시적 캐스팅 : 큰 범위의 데이터 타입은 시스템이 알아서 처리하지 못함. // int i = (int)3.14;
	  				   				  (바뀔 타입)을 보통 캐스트 연산자라고 부름.
	  				                  소수점 데이터는 무조건 버려짐.
	  문자와 형변환 : 문자들은 아스키 코드로 바뀔 수 있음. A(65), a(97), 0(48)
	              문자 'A'를 입력하면 시스템이 65로 암시적 형변환됨.
	  아스키 코드의 특징 : 1) 문자 간의 뺄셈이 가능함. 'c' - 'a' = 2
	                  2) 비교 판단 가능. 'c' > 'a' = true
	                  3) 어떤 문자 ch가 소문자 인지, 아닌지. ch >= 'a' && ch <= 'z' 
	 */
}
